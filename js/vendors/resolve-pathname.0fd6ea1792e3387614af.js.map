{"version":3,"file":"js/vendors/resolve-pathname.0fd6ea1792e3387614af.js","mappings":"qKAAA,SAASA,EAAWC,EAAU,CAC5B,OAAOA,EAAS,OAAO,CAAC,IAAM,GAChC,CAGA,SAASC,EAAUC,EAAMC,EAAO,CAC9B,QAASC,EAAID,EAAOE,EAAID,EAAI,EAAGE,EAAIJ,EAAK,OAAQG,EAAIC,EAAGF,GAAK,EAAGC,GAAK,EAClEH,EAAKE,CAAC,EAAIF,EAAKG,CAAC,EAGlBH,EAAK,IAAI,CACX,CAGA,SAASK,EAAgBC,EAAIC,EAAM,CAC7BA,IAAS,SAAWA,EAAO,IAE/B,IAAIC,EAAWF,GAAMA,EAAG,MAAM,GAAG,GAAM,CAAC,EACpCG,EAAaF,GAAQA,EAAK,MAAM,GAAG,GAAM,CAAC,EAE1CG,EAAUJ,GAAMT,EAAWS,CAAE,EAC7BK,EAAYJ,GAAQV,EAAWU,CAAI,EACnCK,EAAaF,GAAWC,EAW5B,GATIL,GAAMT,EAAWS,CAAE,EAErBG,EAAYD,EACHA,EAAQ,SAEjBC,EAAU,IAAI,EACdA,EAAYA,EAAU,OAAOD,CAAO,GAGlC,CAACC,EAAU,OAAQ,MAAO,IAE9B,IAAII,EACJ,GAAIJ,EAAU,OAAQ,CACpB,IAAIK,EAAOL,EAAUA,EAAU,OAAS,CAAC,EACzCI,EAAmBC,IAAS,KAAOA,IAAS,MAAQA,IAAS,EAC/D,MACED,EAAmB,GAIrB,QADIE,EAAK,EACAb,EAAIO,EAAU,OAAQP,GAAK,EAAGA,IAAK,CAC1C,IAAIc,EAAOP,EAAUP,CAAC,EAElBc,IAAS,IACXjB,EAAUU,EAAWP,CAAC,EACbc,IAAS,MAClBjB,EAAUU,EAAWP,CAAC,EACtBa,KACSA,IACThB,EAAUU,EAAWP,CAAC,EACtBa,IAEJ,CAEA,GAAI,CAACH,EAAY,KAAOG,IAAMA,EAAIN,EAAU,QAAQ,IAAI,EAGtDG,GACAH,EAAU,CAAC,IAAM,KAChB,CAACA,EAAU,CAAC,GAAK,CAACZ,EAAWY,EAAU,CAAC,CAAC,IAE1CA,EAAU,QAAQ,EAAE,EAEtB,IAAIQ,EAASR,EAAU,KAAK,GAAG,EAE/B,OAAII,GAAoBI,EAAO,OAAO,EAAE,IAAM,MAAKA,GAAU,KAEtDA,CACT,CAEA,QAAeZ,C","sources":["webpack://webpack-react-typescript-template/./node_modules/resolve-pathname/esm/resolve-pathname.js"],"sourcesContent":["function isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n}\n\n// About 1.5x faster than the two-arg version of Array#splice()\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n}\n\n// This implementation is based heavily on node's url.parse\nfunction resolvePathname(to, from) {\n  if (from === undefined) from = '';\n\n  var toParts = (to && to.split('/')) || [];\n  var fromParts = (from && from.split('/')) || [];\n\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n\n  var hasTrailingSlash;\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');\n\n  if (\n    mustEndAbs &&\n    fromParts[0] !== '' &&\n    (!fromParts[0] || !isAbsolute(fromParts[0]))\n  )\n    fromParts.unshift('');\n\n  var result = fromParts.join('/');\n\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n\n  return result;\n}\n\nexport default resolvePathname;\n"],"names":["isAbsolute","pathname","spliceOne","list","index","i","k","n","resolvePathname","to","from","toParts","fromParts","isToAbs","isFromAbs","mustEndAbs","hasTrailingSlash","last","up","part","result"],"sourceRoot":""}